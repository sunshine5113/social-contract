/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Poster } from "../Poster";

export class Poster__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Poster> {
    return super.deploy(overrides || {}) as Promise<Poster>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Poster {
    return super.attach(address) as Poster;
  }
  connect(signer: Signer): Poster__factory {
    return super.connect(signer) as Poster__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Poster {
    return new Contract(address, _abi, signerOrProvider) as Poster;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "NewPost",
    type: "event",
  },
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
    ],
    name: "post",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260056080819052640322e322e360dc1b60a09081526100269160019190610039565b5034801561003357600080fd5b506100da565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261006f57600085556100b5565b82601f1061008857805160ff19168380011785556100b5565b828001600101855582156100b5579182015b828111156100b557825182559160200191906001019061009a565b506100c19291506100c5565b5090565b5b808211156100c157600081556001016100c6565b6104c1806100e96000396000f3fe60806040526004361061005a5760003560e01c8063572b6c0511610043578063572b6c05146101ad5780637da0a87714610201578063e1c7392a1461023f5761005a565b80630ae1b13d1461005f578063486ff0cd14610123575b600080fd5b6101216004803603604081101561007557600080fd5b81019060208101813564010000000081111561009057600080fd5b8201836020820111156100a257600080fd5b803590602001918460018302840111640100000000831117156100c457600080fd5b9193909290916020810190356401000000008111156100e257600080fd5b8201836020820111156100f457600080fd5b8035906020019184600183028401116401000000008311171561011657600080fd5b509092509050610254565b005b34801561012f57600080fd5b50610138610314565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017257818101518382015260200161015a565b50505050905090810190601f16801561019f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b957600080fd5b506101ed600480360360208110156101d057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103bf565b604080519115158252519081900360200190f35b34801561020d57600080fd5b506102166103e0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561024b57600080fd5b506101216103fc565b8181604051808383808284376040519201829003909120935061027a925061043c915050565b73ffffffffffffffffffffffffffffffffffffffff167f6c7f3182d7e4cb876251f9ae1489975fdbbf15d9f35d393f2ac9b1ff57cec69f868660405180806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039550909350505050a350505050565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161490565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673d216153c06e857cd7f72665e0af1d7d82172f494179055565b6000601436108015906104535750610453336103bf565b1561048557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610488565b50335b9056fea26469706673582212201e0696834740e84a9899ccc51911e9dda8510f51b5c4b04bcd47b39f4fe7973e64736f6c63430007060033";
