/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Poster } from "../Poster";

export class Poster__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Poster> {
    return super.deploy(overrides || {}) as Promise<Poster>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Poster {
    return super.attach(address) as Poster;
  }
  connect(signer: Signer): Poster__factory {
    return super.connect(signer) as Poster__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Poster {
    return new Contract(address, _abi, signerOrProvider) as Poster;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "NewPost",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "post",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103dd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638ee93cf314610030575b600080fd5b61004a60048036038101906100459190610143565b61004c565b005b60003346435a60405160200161006594939291906101e3565b6040516020818303038152906040528051906020012090508160405161008b9190610231565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff16827fa9b346a628e93de9d9ee1638ee2724d9ebdb3043aceb8bc7ad8bd5b63e52297060405160405180910390a45050565b60006100ee6100e984610279565b610248565b90508281526020810184848401111561010657600080fd5b6101118482856102fb565b509392505050565b600082601f83011261012a57600080fd5b813561013a8482602086016100db565b91505092915050565b60006020828403121561015557600080fd5b600082013567ffffffffffffffff81111561016f57600080fd5b61017b84828501610119565b91505092915050565b610195610190826102bf565b61033d565b82525050565b60006101a6826102a9565b6101b081856102b4565b93506101c081856020860161030a565b80840191505092915050565b6101dd6101d8826102f1565b610361565b82525050565b60006101ef8287610184565b6014820191506101ff82866101cc565b60208201915061020f82856101cc565b60208201915061021f82846101cc565b60208201915081905095945050505050565b600061023d828461019b565b915081905092915050565b6000604051905081810181811067ffffffffffffffff8211171561026f5761026e61036b565b5b8060405250919050565b600067ffffffffffffffff8211156102945761029361036b565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b60006102ca826102d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561032857808201518184015260208101905061030d565b83811115610337576000848401525b50505050565b60006103488261034f565b9050919050565b600061035a8261039a565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008160601b905091905056fea2646970667358221220a37286c8738c9a58adcc5336cb0923f88d71e50b9271d1439451a6c48c9ad1f664736f6c63430008000033";
